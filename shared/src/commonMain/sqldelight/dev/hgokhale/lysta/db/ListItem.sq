import kotlin.Boolean;

CREATE TABLE ListItem (
    id TEXT NOT NULL PRIMARY KEY,
    listId TEXT NOT NULL,
    description TEXT NOT NULL,
    checked INTEGER AS Boolean NOT NULL,
    displayIndex INTEGER NOT NULL,
    FOREIGN KEY (listId) REFERENCES List (id)
);

selectAll:
SELECT * FROM ListItem
WHERE listId = :listId
ORDER BY displayIndex;

insert:
INSERT INTO ListItem(id, listId, description, checked, displayIndex)
VALUES (?, ?, ?, ?, (SELECT count(*) FROM ListItem));

updateDescription:
UPDATE ListItem
SET description = ?
WHERE id = ?;

updateChecked:
UPDATE ListItem
SET checked = ?
WHERE id = ?;

delete {
-- pull items up
UPDATE ListItem
SET displayIndex = displayIndex - 1
WHERE listId = (SELECT listId FROM ListItem WHERE id = :id)
  AND displayIndex > (SELECT displayIndex FROM ListItem WHERE id = :id);

DELETE FROM ListItem
WHERE id = :id;
}

moveUp {
-- 1. Moving UP in the list (current_index > new_index)
UPDATE ListItem
SET displayIndex = displayIndex + 1
WHERE listId = (SELECT listId FROM ListItem WHERE id = :id)
  AND displayIndex < (SELECT displayIndex FROM ListItem WHERE id = :id)
  AND displayIndex >= :newIndex;

-- 2. Update the displayIndex of the moved item
UPDATE ListItem
SET displayIndex = :newIndex
WHERE id = :id;
}

moveDown {
-- 1. Moving DOWN in the list (current_index < new_index)
UPDATE ListItem
SET displayIndex = displayIndex - 1
WHERE listId = (SELECT listId FROM ListItem WHERE id = :id)
  AND displayIndex > (SELECT displayIndex FROM ListItem WHERE id = :id)
  AND displayIndex <= :newIndex;

-- 2. Update the displayIndex of the moved item
UPDATE ListItem
SET displayIndex = :newIndex
WHERE id = :id;
}

insertAt { -- insert the specified item at a particular displayIndex
-- 1. move impacted items down
UPDATE ListItem
SET displayIndex = displayIndex + 1
WHERE displayIndex >= :displayIndex;

-- 2. insert item
INSERT INTO ListItem(id, listId, description, checked, displayIndex)
VALUES (:id, :listId, :description, :checked, :displayIndex);
}